package api

import (
	"L0_project/internal/cache"
	"L0_project/internal/database"
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
)

// Server –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç HTTP-—Å–µ—Ä–≤–µ—Ä.
type Server struct {
	port    string
	router  *chi.Mux
	storage database.Storage
	cache   cache.Cache
}

// NewServer —Å–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–µ—Ä–∞.
func NewServer(port string, storage database.Storage, cache cache.Cache) *Server {
	server := &Server{
		port:    port,
		storage: storage,
		cache:   cache,
	}
	server.router = server.setupRouter()
	return server
}

// Run –∑–∞–ø—É—Å–∫–∞–µ—Ç HTTP-—Å–µ—Ä–≤–µ—Ä.
func (s *Server) Run() error {
	address := fmt.Sprintf(":%s", s.port)
	fmt.Printf("üöÄ HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost%s\n", address)
	return http.ListenAndServe(address, s.router)
}

// setupRouter –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é.
func (s *Server) setupRouter() *chi.Mux {
	router := chi.NewRouter()
	router.Use(middleware.Logger)
	router.Use(middleware.Recoverer)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ API
	orderHandler := NewOrderHandler(s.storage, s.cache)
	router.Get("/api/order/{orderUID}", orderHandler.GetByUID)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
	fileServer := http.FileServer(http.Dir("./web/"))
	router.Handle("/*", fileServer)

	return router
}
